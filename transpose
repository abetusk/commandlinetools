#!/usr/bin/perl


use strict;
use Getopt::Std;


my %opts;
getopts('d:D:i:o:h', \%opts);

sub show_help {
  print "usage:\n";
  print "  [-d input_delim]       input delimeter (default \"\\t\")\n";
  print "  [-D output_delim]      output delimeter (default ' ')\n";
  print "  [-r]                   right justify (default left justify)\n";
  print "  [-i input_file]        input file (default to STDIN)\n";
  print "  [-o output_file]       output file (default to STDOUT)\n";
}

if ($opts{'h'}) { show_help(); exit(0); }

my ($is_stdin, $is_stdout) = (1, 1);
my ($i, $j, $k, $n)=0;
my @a;
my @mfl;
my $max_inp_col = 0;

my ($d, $D) = ("\t", "\t");
my $left_justify=1;

$d = $opts{'d'} if ($opts{'d'});
$D = $opts{'D'} if ($opts{'D'});
$left_justify=0 if ($opts{'r'});

my ($ifh, $ofh);
if ($opts{'i'}) { open $ifh, $opts{'i'} or die $!; $is_stdin=0; }
else { $ifh = *STDIN; }
if ($opts{'o'}) { open $ofh, '>', $opts{'o'} or die $!; $is_stdout=0; }
else { $ofh = *STDOUT; }



$n=0;

while (<$ifh>) {
  chomp;
  my @t = split(/$d/, $_);
  $a[$n++] = \@t;
  $max_inp_col = scalar(@t) if (scalar(@t)>$max_inp_col);
}

for ($i=0; $i<$max_inp_col; $i++) {
  for ($j=0; $j<$n; $j++) {
    my $t = $a[$j];
    print $ofh $D if $j;
    print $ofh $t->[$i];
  }
  print $ofh "\n";
}

close $ifh if !$is_stdin;
close $ofh if !$is_stdout;

